
# based on https://gist.github.com/blootsvoets/7859a291436d852929ba3a32e5d18d8a
services:
  # Nginx reverse proxy to route requests to Atlas and WebAPI
  nginx:
    image: nginx:latest
    ports:
      - "8080:80"  # Nginx listens on port 80 internally, exposed as port 8080
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - atlas
      - webapi
  # Atlas service, running Nginx to serve the Javascript files.
  atlas:
    image: ohdsi/atlas
    environment:
      WEBAPI_URL: http://localhost:8080/WebAPI/
      ATLAS_HOSTNAME: localhost:8080
    #ports:
    #  - 8080:8080
    expose:
      - 8080
    depends_on:
      omop-provision:
        condition: service_completed_successfully

  # WebAPI service, running Nginx to serve the Javascript files.
  webapi:
    image: ohdsi/webapi
    #ports:
    #  - 8081:8080
    expose:
      - 8080
    volumes:
      - ./WebAPIConfig:/var/lib/ohdsi/webapi/WebAPIConfig
    environment:
      - JAVA_OPTS=-Xmx4g -Dsecurity.cors.enabled=false -Dsecurity.origin=*
      - CLASSPATH=":/var/lib/ohdsi/webapi/drivers/*"
      - WEBAPI_URL=http://localhost:8080
      # Specify Spring settings. Any Spring setting that is set in `pom.xml` or your own
      # settings.xml can be replaced with a variable in this list. Replace the periods (.) 
      # in the variable name with underscores (_)
      - env=webapi-postgresql
      - DATASOURCE_DRIVERCLASSNAME=org.postgresql.Driver
      - DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_USER}
      - DATASOURCE_OHDSI_SCHEMA=ohdsi
      - DATASOURCE_USERNAME=${POSTGRES_USER}
      - DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - spring_jpa_properties_hibernate_default__schema=ohdsi
      - spring_jpa_properties_hibernate_dialect=org.hibernate.dialect.PostgreSQLDialect
      - spring_batch_repository_tableprefix=ohdsi.BATCH_
      - flyway_datasource_driverClassName=org.postgresql.Driver
      - flyway_datasource_url=jdbc:postgresql://postgres:5432/${POSTGRES_USER}
      - flyway_schemas=ohdsi
      - flyway_placeholders_ohdsiSchema=ohdsi
      - flyway_datasource_username=${POSTGRES_USER}
      - flyway_datasource_password=${POSTGRES_PASSWORD}
      - flyway_locations=classpath:db/migration/postgresql

      - SECURITY_ORIGIN="*"
      - SECURITY_CORS_ENABLED=false
      - SECURITY_SSL_ENABLED=false
    depends_on:
      omop-provision:
        condition: service_completed_successfully
  omop-provision:
    image: dzdde/omop-provisioner
    volumes: 
      - ${VOCABULARY_SOURCE}:/athena-vocab
    environment:
      LOG_LEVEL: INFO
      POSTGRESQL_HOST: postgres
      POSTGRESQL_USER: ${POSTGRES_USER}
      POSTGRESQL_DATABASE: ${POSTGRES_USER}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_PORT: 5432
      POSTGRESQL_SCHEMA: ${POSTGRES_VOCAB_SCHEMA_NAME}
      VOCABULARY_SOURCE: /athena-vocab
      LOAD_VOCABULARY: ${LOAD_VOCABULARY}
      OHDSI_WEBAPI_REGISTER_DATASOURCE: true
      OHDSI_WEBAPI_POSTGRESQL_SCHEMA: ohdsi
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_ROOT_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--lc-collate C --lc-ctype C --encoding UTF8
    volumes:
      - ./data/postgres/cdm:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -h localhost -p 5432 -q -U ${POSTGRES_USER}"
      interval: 3s
      timeout: 5s
      retries: 5
